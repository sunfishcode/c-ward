[package]
name = "c-gull"
version = "0.15.18"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
]
description = "A libc implementation in Rust"
documentation = "https://docs.rs/c-gull"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/c-ward"
edition = "2021"
keywords = ["linux", "libc"]

[dependencies]
# We use the libc crate for C ABI types and constants, but we don't depend on
# the actual platform libc.
libc = { version = "0.2.138", default-features = false }
c-scape = { path = "../c-scape", version = "0.15.18", default-features = false }
errno = { version = "0.3.3", default-features = false, optional = true }
tz-rs = { version = "0.6.11", default-features = false, optional = true }
printf-compat = { version = "0.1.1", optional = true }
rustix = { version = "0.38.23", default-features = false, optional = true, features = ["fs", "itoa", "net", "param", "process", "procfs", "rand", "termios", "thread", "time"] }

[features]
default = ["thread", "std", "coexist-with-libc", "threadsafe-setenv"]
thread = ["c-scape/thread"]
std = ["c-scape/std", "rustix/std", "printf-compat/std", "tz-rs/std", "errno/std"]

# In "take-charge" mode, this enables code in c-scape to define the
# `origin_start` function documented [here] and call a C ABI-compatible
# extern `main` function.
# [here]: https://docs.rs/origin/latest/origin/program/index.html
call-main = ["c-scape/call-main"]

# Should c-scape provide C ABI definitions of `memcpy` etc. (using
# `compiler_builtins::mem`) or should it rely on `compiler_builtins`
# being linked in and providing those definitions?
define-mem-functions = ["c-scape/define-mem-functions"]

# Enable logging of program and thread startup and shutdown.
log = ["c-scape/log"]

# Install `atomic_dbg::log` as a logger.
atomic-dbg-logger = ["c-scape/atomic-dbg-logger"]

# Install the `env_logger` crate as a logger.
env_logger = ["c-scape/env_logger"]

# Disable logging.
max_level_off = ["c-scape/max_level_off"]

# Enable highly experimental support for performing startup-time relocations,
# needed to support statically-linked PIE executables.
experimental-relocate = ["c-scape/experimental-relocate"]

# A feature that pulls in all the individual features needed to use
# c-gull to write Rust programs completely implemented in Rust.
eyra = [
    "take-charge",
    "std",
    "thread",
    "call-main",
    "malloc-via-crates",
    "define-mem-functions"
]

# One of the following two features must be enabled:

# Enable this to tell c-gull to take control of the process.
take-charge = ["c-scape/take-charge"]

# Enable this to tell c-gull to let a libc be in control of
# the process.
coexist-with-libc = ["c-scape/coexist-with-libc"]

# One of the following two features must be enabled:

# Enable this to implement `malloc` using Rust's global allocator.
malloc-via-rust-global-alloc = ["c-scape/malloc-via-rust-global-alloc"]

# Enable this to implement `malloc` using third-party crates, which
# is useful to do when using the Rust global allocator is using `malloc`.
malloc-via-crates = ["c-scape/malloc-via-crates"]

# This makes `setenv` and friends thread-safe by leaking memory.
threadsafe-setenv = ["c-scape/threadsafe-setenv"]

# Enable `todo!()` stubs for unimplemented functions.
todo = ["c-scape/todo"]
