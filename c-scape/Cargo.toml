[package]
name = "c-scape"
version = "0.14.0"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
]
description = "A libc bottom-half implementation in Rust"
documentation = "https://docs.rs/c-scape"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/c-ward"
edition = "2021"
keywords = ["linux", "libc", "no_std"]
categories = ["no-std"]

[build-dependencies]
# Enable the cc dependency to build the empty `libc.a` and similar libraries
# from the empty.s source file, instead of using the prebuilt libraries.
cc = { version = "1.0.68", optional = true }

[dependencies]
libm = "0.2.1"
rustix = { version = "0.38.14", default-features = false, features = ["event", "fs", "itoa", "mm", "net", "param", "pipe", "process", "rand", "runtime", "stdio", "system", "termios", "thread", "time"] }
rustix-futex-sync = { version = "0.1.1", features = ["atomic_usize"] }
memoffset = "0.9.0"
realpath-ext = { version = "0.1.0", default-features = false }
origin = { version = "0.13.0", default-features = false, features = ["thread", "init-fini-arrays"] }
# We use the libc crate for C ABI types and constants, but we don't depend on
# the actual platform libc.
libc = { version = "0.2.138", default-features = false }
errno = { version = "0.3.3", default-features = false }
rand_pcg = "0.3.1"
rand_core = "0.6.4"
rand = { version = "0.8.5", default-features = false }
rustix-dlmalloc = { version = "0.1.0", optional = true }

[dev-dependencies]
libc = "0.2.138"
static_assertions = "1.1.0"

[features]
default = ["thread", "std", "coexist-with-libc"]
thread = ["origin/set_thread_id"]
std = ["rustix/std"]

# In "take-charge" mode, this enables code in c-scape to define the
# `origin_start` function documented [here] and call a C ABI-compatible
# extern `main` function.
# [here]: https://docs.rs/origin/latest/origin/program/index.html
call-main = []

# Should c-scape provide C ABI definitions of `memcpy` etc. (using
# `compiler_builtins::mem`) or should it rely on `compiler_builtins`
# being linked in and providing those definitions?
define-mem-functions = []

# Enable logging of program and thread startup and shutdown.
log = ["origin/log"]

# Install the `env_logger` crate as a logger.
env_logger = ["origin/env_logger"]

# Enable highly experimental support for performing startup-time relocations,
# needed to support statically-linked PIE executables.
experimental-relocate = ["origin/experimental-relocate"]

# One of the following two features must be enabled:

# Enable this to tell c-scape to take control of the process.
take-charge = ["origin/origin-start", "origin/origin-thread", "origin/origin-signal", "origin/origin-program"]

# Enable this to tell c-scape to let a libc be in control of
# the process.
coexist-with-libc = ["origin/libc"]

# One of the following two features must be enabled:

# Enable to this to implement `malloc` using Rust's global allocator.
malloc-via-rust-global-alloc = []

# Enable to this to implement `malloc` using third-party crates, which
# is useful to do when using the Rust global allocator is using `malloc`.
malloc-via-crates = ["rustix-dlmalloc/global"]
