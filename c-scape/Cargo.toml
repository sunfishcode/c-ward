[package]
name = "c-scape"
version = "0.20.3"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
]
description = "A libc bottom-half implementation in Rust"
documentation = "https://docs.rs/c-scape"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/c-ward"
edition = "2021"
keywords = ["linux", "libc", "no_std"]
categories = ["no-std"]

[build-dependencies]
# Enable the cc dependency to build the empty `libc.a` and similar libraries
# from the empty.s source file, instead of using the prebuilt libraries.
cc = { version = "1.0.68", optional = true }

[dependencies]
libm = "0.2.1"
rustix = { version = "0.38.35", default-features = false, features = ["event", "fs", "itoa", "mm", "net", "param", "pipe", "process", "rand", "runtime", "shm", "stdio", "system", "termios", "thread", "time"] }
rustix-futex-sync = { version = "0.2.1", features = ["atomic_usize"] }
memoffset = "0.9.0"
realpath-ext = { version = "0.1.0", default-features = false }
origin = { version = "0.24.0", default-features = false, features = ["init-fini-arrays", "program-at-exit", "thread-at-exit", "nightly", "getauxval"] }
# We use the libc crate for C ABI types and constants, but we don't depend on
# the actual platform libc.
libc = { version = "0.2.155", default-features = false }
errno = { version = "0.3.3", default-features = false }
rand_pcg = "0.3.1"
rand_core = { version = "0.6.4", features = ["getrandom"] }
rand = { version = "0.8.5", default-features = false }
rustix-dlmalloc = { version = "0.1.0", optional = true }
rustix-openpty = "0.1.1"
bitflags = { version = "2.4.1", default-features = false }
printf-compat = { version = "0.1.1", default-features = false }
num-complex = { version = "0.4.4", default-features = false, features = ["libm"] }
posix-regex = { version = "0.1.1", features = ["no_std"] }

# Special dependencies used in rustc-dep-of-std mode.
core = { version = "1.0.0", optional = true, package = "rustc-std-workspace-core" }
alloc = { version = "1.0.0", optional = true, package = "rustc-std-workspace-alloc" }

# Enable "libc" and don't depend on "spin".
# TODO: Eventually, we should propose a `fde-phdr-rustix` backend option to
# upstream `unwinding` so that it doesn't need to go through `dl_iterate_phdr`,
# but `fde-phdr-dl` works for now.
[target.'cfg(not(target_arch = "arm"))'.dependencies.unwinding]
version = "0.2.3"
default-features = false
features = [
    "unwinder",
    "dwarf-expr",
    "hide-trace",
    "fde-phdr-dl",
    "fde-registry",
    "libc",
]

[dev-dependencies]
libc = "0.2.155"
static_assertions = "1.1.0"

[features]
default = ["thread", "std", "coexist-with-libc", "threadsafe-setenv"]
thread = ["origin/unstable-errno"]
std = ["rustix/std", "printf-compat/std"]

# In "take-charge" mode, this enables code in c-scape to define the
# `origin_start` function documented [here] and call a C ABI-compatible
# extern `main` function.
# [here]: https://docs.rs/origin/latest/origin/program/index.html
call-main = []

# Enable logging of program and thread startup and shutdown.
log = ["origin/log"]

# Install `atomic_dbg::log` as a logger.
atomic-dbg-logger = ["origin/atomic-dbg-logger"]

# Install the `env_logger` crate as a logger.
env_logger = ["origin/env_logger"]

# Disable logging.
max_level_off = ["origin/max_level_off"]

# Enable highly experimental support for performing startup-time relocations,
# needed to support statically-linked PIE executables.
experimental-relocate = ["origin/experimental-relocate"]

# A feature that pulls in all the individual features needed to use
# c-scape to write Rust programs completely implemented in Rust.
eyra = [
    "take-charge",
    "thread",
    "call-main",
    "malloc-via-crates",
]

# One of the following two features must be enabled:

# Enable this to tell c-scape to take control of the process.
take-charge = ["origin/origin-start", "origin/signal"]

# Enable this to tell c-scape to let a libc be in control of
# the process.
coexist-with-libc = ["origin/libc"]

# One of the following two features must be enabled:

# Enable this to implement `malloc` using Rust's global allocator.
malloc-via-rust-global-alloc = []

# Enable this to implement `malloc` using third-party crates, which
# is useful to do when using the Rust global allocator is using `malloc`.
malloc-via-crates = ["rustix-dlmalloc/global"]

# This makes `setenv` and friends thread-safe by leaking memory.
threadsafe-setenv = []

# Special feature for use when c-scape is a dependency of std.
rustc-dep-of-std = [
    "dep:core",
    "dep:alloc",
    "rustix/rustc-dep-of-std",
]

# Enable `todo!()` stubs for not-yet-implemented functions.
todo = []

# Enable `unimplemented!()` stubs for deprecated functions.
deprecated-and-unimplemented = []

# Provide a `#[lang = eh_personality]` function suitable for unwinding (for
# no-std).
#
# If you know your program never unwinds and want smaller code size, use
# "eh-personality-continue" instead.
#
# This is only needed in no-std builds, as std provides a personality. See
# [the "personality" feature of the unwinding crate] for more details.
#
# [the "personality" feature of the unwinding crate]: https://crates.io/crates/unwinding#personality-and-other-utilities
eh-personality = ["origin/eh-personality"]

# Provide a `#[lang = eh_personality]` function that just returns
# `CONTINUE_UNWIND` (for no-std). Use this if you know your program will never
# unwind and don't want any extra code.
eh-personality-continue = ["origin/eh-personality-continue"]

# Provide a `#[panic_handler]` function suitable for unwinding (for no-std).
#
# If you know your program never panics and want smaller code size, use
# "panic-handler-trap" instead.
#
# This is only needed in no-std builds, as std provides a panic handler. See
# [the "panic-handler" feature of the unwinding crate] for more details.
#
# [the "panic-handler" feature of the unwinding crate]: https://crates.io/crates/unwinding#personality-and-other-utilities
panic-handler = ["origin/panic-handler"]

# Provide a `#[panic_handler]` function that just traps (for no-std). Use this
# if you know your program will never panic and don't want any extra code.
panic-handler-trap = ["origin/panic-handler-trap"]

# Provide a `#[global_allocator]` function (for no-std).
#
# This is only needed in no-std builds, as std provides a global allocator.
# Alternatively, you can define the global allocator manually; see the
# example-crates/custom-allocator example.
global-allocator = ["rustix-dlmalloc/global"]

# This extends the `syscall` function with suppport for more syscalls. This is
# not enabled by default because it increases the code size of `syscall` by
# several kibibytes and isn't needed by most Rust programs.
extra-syscalls = [
    "syscall-read",
    "syscall-write",
    "syscall-open",
    "syscall-openat",
    "syscall-close",
    "syscall-getpid",
    "syscall-statx",
    "syscall-epoll_create1",
    "syscall-timerfd_create",
    "syscall-timerfd_settime",
    "syscall-utimensat",
    "syscall-fdatasync",
    "syscall-syncfs",
    "syscall-sync",
    "syscall-pipe2",
]
syscall-read = []
syscall-write = []
syscall-open = []
syscall-openat = []
syscall-close = []
syscall-getpid = []
syscall-statx = []
syscall-epoll_create1 = []
syscall-timerfd_create = []
syscall-timerfd_settime = []
syscall-utimensat = []
syscall-fdatasync = []
syscall-syncfs = []
syscall-sync = []
syscall-pipe2 = []
